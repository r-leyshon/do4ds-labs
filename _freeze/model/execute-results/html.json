{
  "hash": "48849924ab3587472ccf67a1e5acdcbd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Model\nformat:\n  html:\n    code-fold: true\n---\n\n::: {#28abbadb .cell execution_count=1}\n``` {.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\n# import numpy as np\nfrom sklearn.linear_model import LinearRegression\n# from sklearn import preprocessing\nfrom vetiver import VetiverModel, vetiver_pin_write, VetiverAPI\nfrom pins import board_folder\nimport duckdb\nimport requests\n```\n:::\n\n\n## Get Data\n\n::: {#a7d8dfba .cell execution_count=2}\n``` {.python .cell-code}\ncon = duckdb.connect(\"my-db.duckdb\")\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()\n```\n:::\n\n\n\n\n## Define Model and Fit\n\n::: {#0a14583c .cell execution_count=4}\n``` {.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = False)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n::: {#0081a796 .cell execution_count=5}\n``` {.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\nIntercept 2708.3204686392337\nColumns Index(['bill_length_mm', 'species_Adelie', 'species_Chinstrap',\n       'species_Gentoo', 'sex_female', 'sex_male'],\n      dtype='object')\nCoefficients [  32.53688677 -265.36728566 -564.13282013  829.50010579 -273.68346204\n  273.68346204]\n```\n:::\n:::\n\n\n\n\n## Create API\n\n::: {#8c57b6ee .cell execution_count=7}\n``` {.python .cell-code}\n# run this stage in CLI\nb = board_folder(\"data/model\", allow_pickle_read=True)\nv = VetiverModel.from_pin(b, \"penguin_model\")\napp = VetiverAPI(v, check_prototype=True)\n\napp.run(port=8080)\n# may need to kill the server process eg kill 34246 when done\n```\n:::\n\n\n## Query API\n\n::: {#ce7c9bca .cell execution_count=8}\n``` {.python .cell-code}\n# once app is running, execute cell\npred_X = 20\nreq_data = [{\n  \"bill_length_mm\": pred_X,\n  \"species_Chinstrap\": False,\n  \"species_Gentoo\": False,\n  \"sex_male\": False\n}]\nreq = requests.post(\n  \"http://127.0.0.1:8080/predict\", json=req_data,\n  headers={\"Content-Type\": \"application/json\"},\n)\nres = req.json().get(\"predict\")[0]\nprint(f\"For bill length {pred_X}, body mass {res} is predicted.\")\n```\n:::\n\n\n",
    "supporting": [
      "model_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}